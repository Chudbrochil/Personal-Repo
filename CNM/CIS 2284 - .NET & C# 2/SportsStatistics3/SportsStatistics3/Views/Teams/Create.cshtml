@model SportsStatistics3.Models.Team

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Team</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TeamName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TeamName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TeamName, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Request.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Wins, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Wins, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Wins, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        @if (Request.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Losses, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Losses, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Losses, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        @if (Request.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.WinPct, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.WinPct, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.WinPct, "", new { @class = "text-danger" })
                </div>
            </div>

        }

        <div class="form-group">
            @Html.LabelFor(model => model.RealName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RealName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RealName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Request.IsAuthenticated && User.IsInRole("Adminstrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.hasPaid, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.hasPaid)
                        @Html.ValidationMessageFor(model => model.hasPaid, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        }

        @if (Request.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.AmountPaid, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.AmountPaid, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AmountPaid, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        @if (Request.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.IsCommissioner, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsCommissioner)
                        @Html.ValidationMessageFor(model => model.IsCommissioner, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        }


        @Html.ActionLink("Pay with Paypal Account", "PaymentWithPaypal", "Paypal")

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
